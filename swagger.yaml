openapi: 3.1.0
info:
  title: Warehouse Productivity API
  version: 1.0.0
  description: REST API for tracking warehouse productivity metrics

servers:
  - url: http://localhost:5050
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Overview
    description: Productivity overview and dashboard data
  - name: Daily Logs
    description: Operations for managing daily productivity logs
  - name: Users
    description: User management operations
  - name: Top Performers
    description: Operations for retrieving top performing operators
  - name: Insights
    description: Operations for retrieving productivity insights

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token

  schemas:
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - type: object
          properties:
            success:
              type: boolean
              example: false
            message:
              type: string
              example: Invalid request parameters
            errors:
              type: array
              items:
                type: string
              example:
                [
                  "Username is required",
                  "Password must be at least 8 characters",
                ]

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        fullName:
          type: string
          example: John Doe
        role:
          type: string
          example: "operator"

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: operator
        description:
          type: string
          example: Warehouse operator role

    Attendance:
      type: object
      properties:
        id:
          type: integer
          example: 1
        dailyLogId:
          type: integer
          example: 1
        operatorId:
          type: integer
          example: 1
        present:
          type: boolean
          example: true
        operator:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: johndoe
            fullName:
              type: string
              example: John Doe
            role:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: operator

    DailyLog:
      type: object
      properties:
        id:
          type: integer
          example: 1
        logDate:
          type: string
          format: date-time
          example: "2024-03-20T00:00:00Z"
        binningCount:
          type: integer
          minimum: 0
          example: 150
        pickingCount:
          type: integer
          minimum: 0
          example: 200
        totalItems:
          type: integer
          example: 350
        issueNotes:
          type: string
          nullable: true
          example: "Regular day with good productivity"
        attendance:
          type: array
          items:
            $ref: "#/components/schemas/Attendance"
        createdAt:
          type: string
          format: date-time
          example: "2024-03-20T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-03-20T10:00:00Z"

    ProductivityMetrics:
      type: object
      properties:
        totalBinning:
          type: integer
          example: 1500
        totalPicking:
          type: integer
          example: 2000
        totalItems:
          type: integer
          example: 3500
        averageItemsPerDay:
          type: number
          format: float
          example: 175.5
        presentDays:
          type: integer
          example: 20
        totalDays:
          type: integer
          example: 22
        attendanceRate:
          type: number
          format: float
          example: 90.9

    UserProductivity:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        fullName:
          type: string
          example: John Doe
        totalBinning:
          type: integer
          example: 750
        totalPicking:
          type: integer
          example: 1000
        totalItems:
          type: integer
          example: 1750
        averageItemsPerDay:
          type: number
          format: float
          example: 87.5
        presentDays:
          type: integer
          example: 20
        attendanceRate:
          type: number
          format: float
          example: 90.9

    DailyProductivity:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2024-02-20"
        username:
          type: string
          example: johndoe
        fullName:
          type: string
          example: John Doe
        isPresent:
          type: boolean
          example: true
        binningCount:
          type: integer
          example: 150
        pickingCount:
          type: integer
          example: 200
        totalItems:
          type: integer
          example: 350

    Pagination:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer

    OverviewCountsResponse:
      type: object
      properties:
        binning:
          type: integer
          example: 150
          description: Total binning count for the current day
        picking:
          type: integer
          example: 200
          description: Total picking count for the current day
        presentWorkers:
          type: integer
          example: 5
          description: Number of workers present today
        productivityTarget:
          type: integer
          example: 100
          description: Productivity target for the day

    BarProductivityResponse:
      type: object
      properties:
        productivity:
          type: number
          format: float
          example: 87.5
          description: Overall productivity percentage

    TrendDataPoint:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2024-05-15T00:00:00.000Z"
        productivity:
          type: number
          format: float
          example: 85.2
          description: Productivity percentage for this data point
        totalItems:
          type: integer
          example: 350
          description: Total items processed for this data point

    RecentLogResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        logDate:
          type: string
          format: date-time
          example: "2024-05-15T00:00:00.000Z"
        binningCount:
          type: integer
          example: 150
        pickingCount:
          type: integer
          example: 200
        totalItems:
          type: integer
          nullable: true
          example: 350
        issueNotes:
          type: string
          nullable: true
          example: "Some operational notes for the day"
        attendance:
          type: array
          items:
            type: object
            properties:
              operator:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "budi_santoso"
        createdAt:
          type: string
          format: date-time
          example: "2024-05-15T08:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-05-15T08:30:00.000Z"

    WorkerPresentResponse:
      type: object
      properties:
        present:
          type: integer
          description: Number of present workers
          example: 5
        absent:
          type: integer
          description: Number of absent workers
          example: 2
        total:
          type: integer
          description: Total number of workers
          example: 7
        presentPercentage:
          type: number
          format: float
          description: Percentage of present workers
          example: 71.43
        absentPercentage:
          type: number
          format: float
          description: Percentage of absent workers
          example: 28.57

    TrendItemDataPoint:
      type: object
      properties:
        date:
          type: string
          format: date-time
          description: Date of the data point
          example: "2024-03-20T00:00:00Z"
        binningCount:
          type: integer
          description: Number of items processed in binning
          example: 150
        pickingCount:
          type: integer
          description: Number of items processed in picking
          example: 200
        totalItems:
          type: integer
          description: Total number of items processed
          example: 350

    TrendItemResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TrendItemDataPoint"
        period:
          type: object
          properties:
            startDate:
              type: string
              format: date-time
              example: "2024-03-01T00:00:00Z"
            endDate:
              type: string
              format: date-time
              example: "2024-03-20T00:00:00Z"

    WorkerPerformanceMetric:
      type: object
      properties:
        operatorId:
          type: integer
          description: ID of the operator
          example: 1
        operatorName:
          type: string
          description: Name of the operator
          example: "John Doe"
        productivity:
          type: object
          properties:
            actual:
              type: number
              format: float
              description: Actual productivity (items per day)
              example: 175.5
            target:
              type: number
              format: float
              description: Target productivity
              example: 150
        workdays:
          type: integer
          description: Number of days worked
          example: 20
        totalItems:
          type: integer
          description: Total items processed
          example: 3510

    WorkerPerformanceResponse:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/WorkerPerformanceMetric"
        period:
          type: object
          properties:
            startDate:
              type: string
              format: date-time
              example: "2024-03-01T00:00:00Z"
            endDate:
              type: string
              format: date-time
              example: "2024-03-20T00:00:00Z"
        type:
          type: string
          enum: [weekly, monthly]
          description: Type of performance metrics
          example: "weekly"

    UserRole:
      type: object
      properties:
        id:
          type: integer
          description: Role ID
        name:
          type: string
          enum: [KEPALA_GUDANG, OPERASIONAL, ADMIN_LOGISTIK]
          description: Role name
        editAccess:
          type: boolean
          description: Whether the role has edit access
        viewAccess:
          type: boolean
          description: Whether the role has view access
        description:
          type: string
          nullable: true
          description: Role description

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: User ID
        fullName:
          type: string
          description: User's full name
        username:
          type: string
          description: User's username
        email:
          type: string
          format: email
          description: User's email address
        role:
          $ref: '#/components/schemas/UserRole'
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp

    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
          description: List of users
        total:
          type: integer
          description: Total number of users

    CreateUserRequest:
      type: object
      required:
        - fullName
        - username
        - email
        - password
        - role
        - accessLevel
      properties:
        fullName:
          type: string
          description: User's full name
        username:
          type: string
          minLength: 3
          description: User's username (min 3 characters)
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 6
          description: User's password (min 6 characters)
        role:
          type: string
          enum: [KEPALA_GUDANG, OPERASIONAL, ADMIN_LOGISTIK]
          description: User's role
        accessLevel:
          type: integer
          minimum: 1
          description: User's access level

    UpdateUserRequest:
      type: object
      properties:
        fullName:
          type: string
          description: User's full name
        username:
          type: string
          minLength: 3
          description: User's username (min 3 characters)
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 6
          description: User's password (min 6 characters)
        role:
          type: string
          enum: [KEPALA_GUDANG, OPERASIONAL, ADMIN_LOGISTIK]
          description: User's role
        accessLevel:
          type: integer
          minimum: 1
          description: User's access level

paths:
  /health:
    get:
      summary: Health check endpoint
      responses:
        "200":
          description: Server is healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: ok
                          timestamp:
                            type: string
                            format: date-time

  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - fullName
                - roleId
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  example: password123
                fullName:
                  type: string
                  example: John Doe
                roleId:
                  type: integer
                  example: 1
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - usernameOrEmail
                - password
              properties:
                usernameOrEmail:
                  type: string
                  description: Username or email of the user
                  example: john
                password:
                  type: string
                  description: Password of the user
                  example: 1234abcd
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              username:
                                type: string
                                example: johndoe
                              email:
                                type: string
                                format: email
                                example: john.doe@example.com
                              fullName:
                                type: string
                                example: John Doe
                              role:
                                type: string
                                example: operator
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                          refreshToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              example:
                success: true
                message: "Login successful"
                data:
                  user:
                    id: 1
                    username: johndoe
                    email: john.doe@example.com
                    fullName: John Doe
                    role: operator
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Invalid username or password"
                errors: ["Invalid credentials"]

  /api/auth/refresh-token:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/overview/counts:
    get:
      summary: Get today's overview counts
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Today's overview counts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          binning:
                            type: integer
                            description: Total binning items for today
                            example: 500
                          picking:
                            type: integer
                            description: Total picking items for today
                            example: 300
                          presentWorkers:
                            type: integer
                            description: Number of present workers today
                            example: 5
                          productivityTarget:
                            type: integer
                            description: Target productivity per operator
                            example: 55
                          productivityActual:
                            type: integer
                            description: Actual productivity (items per operator)
                            example: 160
                    required:
                      - data
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Internal server error"

  /api/overview/bar-productivity:
    get:
      summary: Get productivity data for the last 7 days
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Productivity data for the last 7 days
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          productivity:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  format: date-time
                                  description: Date of the productivity data
                                  example: "2024-03-15T00:00:00Z"
                                productivity:
                                  type: integer
                                  description: Items per operator for that day
                                  example: 160
                          target:
                            type: integer
                            description: Target productivity per operator
                            example: 55
                    required:
                      - data
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/overview/trend:
    get:
      summary: Get average productivity trends
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Average productivity trends
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          daily_average:
                            type: integer
                            description: Average items per operator per day across all time
                            example: 160
                          weekly_average:
                            type: integer
                            description: Average items per operator per week across all time
                            example: 155
                          monthly_average:
                            type: integer
                            description: Average items per operator per month across all time
                            example: 150
                    required:
                      - data
        "400":
          description: Invalid period parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/overview/recent-logs:
    get:
      summary: Get recent daily logs
      tags: [Overview]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of recent logs to return
      responses:
        "200":
          description: Recent daily logs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            logDate:
                              type: string
                              format: date-time
                              example: "2024-03-15T00:00:00Z"
                            binningCount:
                              type: integer
                              example: 500
                            pickingCount:
                              type: integer
                              example: 300
                            attendance:
                              type: array
                              items:
                                type: object
                                properties:
                                  operator:
                                    type: object
                                    properties:
                                      id:
                                        type: integer
                                        example: 1
                                      username:
                                        type: string
                                        example: "john_doe"
                    required:
                      - data
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users. Only accessible by KEPALA_GUDANG.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        '403':
          $ref: '#/components/schemas/ForbiddenError'
        '500':
          $ref: '#/components/schemas/ServerError'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user with the provided details. Only accessible by KEPALA_GUDANG.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        '403':
          $ref: '#/components/schemas/ForbiddenError'
        '500':
          $ref: '#/components/schemas/ServerError'

  /api/users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID

    put:
      tags:
        - Users
      summary: Update a user
      description: Update an existing user's details. Only accessible by KEPALA_GUDANG.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/schemas/BadRequestError'
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        '403':
          $ref: '#/components/schemas/ForbiddenError'
        '404':
          $ref: '#/components/schemas/NotFoundError'
        '500':
          $ref: '#/components/schemas/ServerError'

    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete an existing user. Only accessible by KEPALA_GUDANG.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User deleted successfully
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        '403':
          $ref: '#/components/schemas/ForbiddenError'
        '404':
          $ref: '#/components/schemas/NotFoundError'
        '500':
          $ref: '#/components/schemas/ServerError'

  /api/daily-logs:
    post:
      summary: Create daily log with worker attendance
      description: |
        Create a new daily log with attendance records for multiple workers.
        Only editors can create logs for multiple workers.
        Operators can only create logs for themselves.
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - logDate
                - workerPresents
              properties:
                logDate:
                  type: string
                  format: date
                  description: Date of the daily log
                  example: "2024-03-20"
                workerPresents:
                  type: array
                  description: Array of worker IDs who are present
                  items:
                    type: integer
                  example: [1, 2, 3]
                workNotes:
                  type: string
                  description: Optional notes about the work day
                  example: "Regular day with good productivity"
                binningCount:
                  type: integer
                  minimum: 0
                  description: Number of items processed in binning
                  example: 150
                pickingCount:
                  type: integer
                  minimum: 0
                  description: Number of items processed in picking
                  example: 200
      responses:
        "201":
          description: Daily log created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/DailyLog"
              example:
                success: true
                message: "Daily log created successfully"
                data:
                  id: 1
                  logDate: "2024-03-20T00:00:00Z"
                  binningCount: 150
                  pickingCount: 200
                  totalItems: 350
                  issueNotes: "Regular day with good productivity"
                  attendance:
                    - id: 1
                      operatorId: 1
                      present: true
                      operator:
                        id: 1
                        username: "johndoe"
                        fullName: "John Doe"
                        role:
                          id: 1
                          name: "operator"
                  createdAt: "2024-03-20T10:00:00Z"
                  updatedAt: "2024-03-20T10:00:00Z"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Cannot create log for future dates"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Unauthorized"
        "403":
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Only editors can create logs for multiple workers"
        "409":
          description: Conflict - Log already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Daily log already exists for this date"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Internal server error"
    get:
      summary: Get daily logs with optional filters and sorting
      description: |
        Retrieve a list of daily logs with optional date range and user filters.
        Supports pagination and sorting by various fields including:
        - logDate: Sort by the date of the log
        - binningCount: Sort by number of items processed in binning
        - pickingCount: Sort by number of items processed in picking
        - totalItems: Sort by total items processed
        - productivity: Sort by items processed per operator
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - in: query
          name: startDate
          schema:
            type: string
            format: date
            example: "2024-03-01"
          description: Start date for filtering (inclusive)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
            example: "2024-03-31"
          description: End date for filtering (inclusive)
        - in: query
          name: operatorName
          schema:
            type: string
            example: "John Doe"
          description: Filter logs by operator name
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              [logDate, binningCount, pickingCount, totalItems, productivity]
            default: logDate
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order (ascending or descending)
      responses:
        "200":
          description: List of daily logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          logs:
                            type: array
                            items:
                              $ref: "#/components/schemas/DailyLog"
                          total:
                            type: integer
                            example: 50
                            description: Total number of logs matching the filters
                          page:
                            type: integer
                            example: 1
                            description: Current page number
                          limit:
                            type: integer
                            example: 10
                            description: Number of items per page
                          totalPages:
                            type: integer
                            example: 5
                            description: Total number of pages
              example:
                success: true
                data:
                  logs:
                    - id: 1
                      logDate: "2024-03-20T00:00:00Z"
                      binningCount: 150
                      pickingCount: 200
                      totalItems: 350
                      productivity: 175
                      issueNotes: "Regular day with good productivity"
                      attendance:
                        - operatorId: 1
                          operatorName: "John Doe"
                        - operatorId: 2
                          operatorName: "Jane Smith"
                      createdAt: "2024-03-20T10:00:00Z"
                      updatedAt: "2024-03-20T10:00:00Z"
                  total: 50
                  page: 1
                  limit: 10
                  totalPages: 5
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalidSort:
                  value:
                    success: false
                    message: "Invalid sort field"
                invalidSortOrder:
                  value:
                    success: false
                    message: "Sort order must be either asc or desc"
                invalidDateRange:
                  value:
                    success: false
                    message: "startDate must be before or equal to endDate"
                invalidPagination:
                  value:
                    success: false
                    message: "page must be at least 1"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Unauthorized"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Internal server error"

  /api/daily-logs/{id}:
    get:
      summary: Get specific daily log
      description: |
        Retrieve a specific daily log by ID, including attendance records and operator details.
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the daily log to retrieve
      responses:
        "200":
          description: Daily log retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/DailyLog"
              example:
                success: true
                data:
                  id: 1
                  logDate: "2024-03-20T00:00:00Z"
                  binningCount: 150
                  pickingCount: 200
                  totalItems: 350
                  issueNotes: "Regular day with good productivity"
                  attendance:
                    - id: 1
                      operatorId: 1
                      present: true
                      operator:
                        id: 1
                        username: "johndoe"
                        fullName: "John Doe"
                        role:
                          id: 1
                          name: "operator"
                  createdAt: "2024-03-20T10:00:00Z"
                  updatedAt: "2024-03-20T10:00:00Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Unauthorized"
        "404":
          description: Daily log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Daily log not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                success: false
                message: "Internal server error"
    delete:
      summary: Delete daily log
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Daily log deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/daily-logs/user/{userId}:
    get:
      summary: Get user's daily logs
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
      responses:
        "200":
          description: User's daily logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/DailyLog"
                      pagination:
                        $ref: "#/components/schemas/Pagination"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/top-performers:
    get:
      summary: Get top performing operators
      description: Returns a list of operators sorted by their average achievement vs target
      tags: [Top Performers]
      responses:
        "200":
          description: List of top performers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        operatorId:
                          type: integer
                          example: 1
                        operatorName:
                          type: string
                          example: "John Doe"
                        avgMonthlyProductivity:
                          type: integer
                          example: 150
                        avgMonthlyWorkdays:
                          type: number
                          example: 20.5
                        avgAchievementVsTarget:
                          type: number
                          example: 125.5
                        totalWorkdays:
                          type: integer
                          example: 62
                        totalItems:
                          type: integer
                          example: 9300
        "400":
          description: Invalid months parameter
        "500":
          description: Server error

  /api/insights/worker-present:
    get:
      summary: Get worker attendance statistics for a specific date
      tags: [Insights]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Date to get attendance for (YYYY-MM-DD)
          example: "2024-03-20"
      responses:
        "200":
          description: Worker attendance statistics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/WorkerPresentResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/insights/trend-item:
    get:
      summary: Get trend of binning and picking items over a date range
      tags: [Insights]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
          example: "2024-03-01"
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
          example: "2024-03-20"
      responses:
        "200":
          description: Trend data for binning and picking items
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/TrendItemResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/insights/worker-performance:
    get:
      summary: Get worker productivity metrics
      tags: [Insights]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [weekly, monthly]
          description: Type of performance metrics
          example: "weekly"
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
          example: "2024-03-01"
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
          example: "2024-03-20"
      responses:
        "200":
          description: Worker performance metrics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/WorkerPerformanceResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

security:
  - bearerAuth: []
