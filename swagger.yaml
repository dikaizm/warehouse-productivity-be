openapi: 3.1.0
info:
  title: Warehouse Productivity API
  version: 1.0.0
  description: REST API for tracking warehouse productivity metrics

servers:
  - url: http://localhost:5050
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Overview
    description: Productivity overview and dashboard data
  - name: Daily Logs
    description: Operations for managing daily productivity logs
  - name: Activity Logs
    description: Operations for tracking user activities
  - name: Users
    description: User management operations
  - name: Daily Input
    description: Operations for daily productivity input

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token

  schemas:
    BaseResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: false
            message:
              type: string
              example: Invalid request parameters
            errors:
              type: array
              items:
                type: string
              example: ["Username is required", "Password must be at least 8 characters"]

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        fullName:
          type: string
          example: John Doe
        role:
          type: string
          example: "operator"

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: operator
        description:
          type: string
          example: Warehouse operator role

    DailyLog:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        logDate:
          type: string
          format: date
        isPresent:
          type: boolean
        binningCount:
          type: integer
        pickingCount:
          type: integer
        totalItems:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    ProductivityMetrics:
      type: object
      properties:
        totalBinning:
          type: integer
          example: 1500
        totalPicking:
          type: integer
          example: 2000
        totalItems:
          type: integer
          example: 3500
        averageItemsPerDay:
          type: number
          format: float
          example: 175.5
        presentDays:
          type: integer
          example: 20
        totalDays:
          type: integer
          example: 22
        attendanceRate:
          type: number
          format: float
          example: 90.9

    UserProductivity:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        fullName:
          type: string
          example: John Doe
        totalBinning:
          type: integer
          example: 750
        totalPicking:
          type: integer
          example: 1000
        totalItems:
          type: integer
          example: 1750
        averageItemsPerDay:
          type: number
          format: float
          example: 87.5
        presentDays:
          type: integer
          example: 20
        attendanceRate:
          type: number
          format: float
          example: 90.9

    DailyProductivity:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2024-02-20"
        username:
          type: string
          example: johndoe
        fullName:
          type: string
          example: John Doe
        isPresent:
          type: boolean
          example: true
        binningCount:
          type: integer
          example: 150
        pickingCount:
          type: integer
          example: 200
        totalItems:
          type: integer
          example: 350

    Pagination:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer

    OverviewCountsResponse:
      type: object
      properties:
        binning:
          type: integer
          example: 150
          description: Total binning count for the current day
        picking:
          type: integer
          example: 200
          description: Total picking count for the current day
        presentWorkers:
          type: integer
          example: 5
          description: Number of workers present today
        productivityTarget:
          type: integer
          example: 100
          description: Productivity target for the day

    BarProductivityResponse:
      type: object
      properties:
        productivity:
          type: number
          format: float
          example: 87.5
          description: Overall productivity percentage

    TrendDataPoint:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2024-05-15T00:00:00.000Z"
        productivity:
          type: number
          format: float
          example: 85.2
          description: Productivity percentage for this data point
        totalItems:
          type: integer
          example: 350
          description: Total items processed for this data point

    RecentLogResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        logDate:
          type: string
          format: date-time
          example: "2024-05-15T00:00:00.000Z"
        binningCount:
          type: integer
          example: 150
        pickingCount:
          type: integer
          example: 200
        totalItems:
          type: integer
          nullable: true
          example: 350
        issueNotes:
          type: string
          nullable: true
          example: "Some operational notes for the day"
        attendance:
          type: array
          items:
            type: object
            properties:
              operator:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "budi_santoso"
        createdAt:
          type: string
          format: date-time
          example: "2024-05-15T08:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-05-15T08:30:00.000Z"

paths:
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: ok
                          timestamp:
                            type: string
                            format: date-time

  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - fullName
                - roleId
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  example: password123
                fullName:
                  type: string
                  example: John Doe
                roleId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - usernameOrEmail
                - password
              properties:
                usernameOrEmail:
                  type: string
                  description: Username or email of the user
                  example: john
                password:
                  type: string
                  description: Password of the user
                  example: 1234abcd
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              username:
                                type: string
                                example: johndoe
                              email:
                                type: string
                                format: email
                                example: john.doe@example.com
                              fullName:
                                type: string
                                example: John Doe
                              role:
                                type: string
                                example: operator
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                          refreshToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              example:
                success: true
                message: "Login successful"
                data:
                  user:
                    id: 1
                    username: johndoe
                    email: john.doe@example.com
                    fullName: John Doe
                    role: operator
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Invalid username or password"
                errors: ["Invalid credentials"]

  /api/auth/refresh-token:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/overview/counts:
    get:
      summary: Get today's overview counts
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Today's overview counts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          binning:
                            type: integer
                            description: Total binning items for today
                            example: 500
                          picking:
                            type: integer
                            description: Total picking items for today
                            example: 300
                          presentWorkers:
                            type: integer
                            description: Number of present workers today
                            example: 5
                          productivityTarget:
                            type: integer
                            description: Target productivity per operator
                            example: 55
                          productivityActual:
                            type: integer
                            description: Actual productivity (items per operator)
                            example: 160
                    required:
                      - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Internal server error"

  /api/overview/bar-productivity:
    get:
      summary: Get productivity data for the last 7 days
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Productivity data for the last 7 days
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          productivity:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  format: date-time
                                  description: Date of the productivity data
                                  example: "2024-03-15T00:00:00Z"
                                productivity:
                                  type: integer
                                  description: Items per operator for that day
                                  example: 160
                          target:
                            type: integer
                            description: Target productivity per operator
                            example: 55
                    required:
                      - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/overview/trend:
    get:
      summary: Get average productivity trends
      tags: [Overview]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Average productivity trends
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          daily_average:
                            type: integer
                            description: Average items per operator per day across all time
                            example: 160
                          weekly_average:
                            type: integer
                            description: Average items per operator per week across all time
                            example: 155
                          monthly_average:
                            type: integer
                            description: Average items per operator per month across all time
                            example: 150
                    required:
                      - data
        '400':
          description: Invalid period parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/overview/recent-logs:
    get:
      summary: Get recent daily logs
      tags: [Overview]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
            example: 10
          description: Number of recent logs to return
      responses:
        '200':
          description: Recent daily logs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            logDate:
                              type: string
                              format: date-time
                              example: "2024-03-15T00:00:00Z"
                            binningCount:
                              type: integer
                              example: 500
                            pickingCount:
                              type: integer
                              example: 300
                            attendance:
                              type: array
                              items:
                                type: object
                                properties:
                                  operator:
                                    type: object
                                    properties:
                                      id:
                                        type: integer
                                        example: 1
                                      username:
                                        type: string
                                        example: "john_doe"
                    required:
                      - data
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users:
    get:
      summary: List users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-logs:
    post:
      summary: Create or update daily log
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - logDate
                - isPresent
              properties:
                logDate:
                  type: string
                  format: date
                isPresent:
                  type: boolean
                binningCount:
                  type: integer
                  minimum: 0
                pickingCount:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Daily log created/updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DailyLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List daily logs
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: userId
          schema:
            type: integer
      responses:
        '200':
          description: List of daily logs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DailyLog'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-logs/{id}:
    get:
      summary: Get specific daily log
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Daily log retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DailyLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete daily log
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Daily log deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-logs/user/{userId}:
    get:
      summary: Get user's daily logs
      tags: [Daily Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
      responses:
        '200':
          description: User's daily logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DailyLog'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/activity-logs:
    post:
      summary: Create activity log
      tags: [Activity Logs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - dataType
                - status
              properties:
                userId:
                  type: integer
                dataType:
                  type: string
                  enum: [binning, picking, attendance]
                status:
                  type: string
                  enum: [success, failure]
                changeHistory:
                  type: object
      responses:
        '200':
          description: Activity log created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ActivityLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List activity logs
      tags: [Activity Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: userId
          schema:
            type: integer
        - in: query
          name: dataType
          schema:
            type: string
            enum: [binning, picking, attendance]
        - in: query
          name: status
          schema:
            type: string
            enum: [success, failure]
      responses:
        '200':
          description: List of activity logs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ActivityLog'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/activity-logs/{id}:
    get:
      summary: Get specific activity log
      tags: [Activity Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Activity log retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ActivityLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/activity-logs/user/{userId}:
    get:
      summary: Get user's activity logs
      tags: [Activity Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: dataType
          schema:
            type: string
            enum: [binning, picking, attendance]
        - in: query
          name: status
          schema:
            type: string
            enum: [success, failure]
      responses:
        '200':
          description: User's activity logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ActivityLog'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/activity-logs/stats:
    get:
      summary: Get activity statistics
      tags: [Activity Logs]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: dataType
          schema:
            type: string
            enum: [binning, picking, attendance]
      responses:
        '200':
          description: Activity statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalActivities:
                            type: object
                            properties:
                              binning:
                                type: integer
                              picking:
                                type: integer
                              attendance:
                                type: integer
                          successRates:
                            type: object
                            properties:
                              binning:
                                type: number
                                format: float
                              picking:
                                type: number
                                format: float
                              attendance:
                                type: number
                                format: float
                          dailyAverages:
                            type: object
                            properties:
                              binning:
                                type: number
                                format: float
                              picking:
                                type: number
                                format: float
                              attendance:
                                type: number
                                format: float
                          mostActiveUsers:
                            type: array
                            items:
                              type: object
                              properties:
                                userId:
                                  type: integer
                                username:
                                  type: string
                                totalActivities:
                                  type: integer
                          mostCommonTypes:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                count:
                                  type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/daily-input:
    post:
      summary: Create or update daily productivity input
      tags: [Daily Input]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
                - binningCount
                - pickingCount
                - isPresent
              properties:
                date:
                  type: string
                  format: date
                  description: Date of the productivity record
                binningCount:
                  type: integer
                  minimum: 0
                  description: Number of items processed in binning (incoming items)
                pickingCount:
                  type: integer
                  minimum: 0
                  description: Number of items processed in picking (outgoing items)
                isPresent:
                  type: boolean
                  description: Whether the operator was present on this date
                notes:
                  type: string
                  description: Optional notes about work challenges or issues
      responses:
        '200':
          description: Daily input created/updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                          date:
                            type: string
                            format: date
                          binningCount:
                            type: integer
                          pickingCount:
                            type: integer
                          totalItems:
                            type: integer
                          isPresent:
                            type: boolean
                          notes:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

security:
  - bearerAuth: [] 